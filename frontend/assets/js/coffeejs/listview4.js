// Generated by CoffeeScript 1.3.1
(function() {
  var Item4, ItemView4, List4, ListView4, listview4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function() {});

  Item4 = (function(_super) {

    __extends(Item4, _super);

    Item4.name = 'Item4';

    function Item4() {
      return Item4.__super__.constructor.apply(this, arguments);
    }

    Item4.prototype.defaults = {
      part1: 'Hello',
      part2: 'Backbone'
    };

    return Item4;

  })(Backbone.Model);

  List4 = (function(_super) {

    __extends(List4, _super);

    List4.name = 'List4';

    function List4() {
      return List4.__super__.constructor.apply(this, arguments);
    }

    List4.prototype.model = Item4;

    return List4;

  })(Backbone.Collection);

  ItemView4 = (function(_super) {

    __extends(ItemView4, _super);

    ItemView4.name = 'ItemView4';

    function ItemView4() {
      this.unrender = __bind(this.unrender, this);
      return ItemView4.__super__.constructor.apply(this, arguments);
    }

    ItemView4.prototype.tagName = 'li';

    ItemView4.prototype.initialize = function() {
      _.bindAll(this);
      this.model.bind('change', this.render);
      return this.model.bind('remove', this.unrender);
    };

    ItemView4.prototype.render = function() {
      $(this.el).html("<span>" + (this.model.get('part1')) + " " + (this.model.get('part2')) + "!</span>\n<span class=\"swap\">swap</span>\n<span class=\"delete\">delete</span>");
      return this;
    };

    ItemView4.prototype.unrender = function() {
      return $(this.el).remove();
    };

    ItemView4.prototype.swap = function() {
      return this.model.set({
        part1: this.model.get('part2'),
        part2: this.model.get('part1')
      });
    };

    ItemView4.prototype.remove = function() {
      return this.model.destroy();
    };

    ItemView4.prototype.events = {
      'click .swap': 'swap',
      'click .delete': 'remove'
    };

    return ItemView4;

  })(Backbone.View);

  ListView4 = (function(_super) {

    __extends(ListView4, _super);

    ListView4.name = 'ListView4';

    function ListView4() {
      return ListView4.__super__.constructor.apply(this, arguments);
    }

    ListView4.prototype.el = $('#ulitemlistview2');

    ListView4.prototype.initialize = function() {
      _.bindAll(this);
      this.collection = new List4;
      this.collection.bind('add', this.appendItem);
      this.counter = 0;
      return this.render();
    };

    ListView4.prototype.render = function() {
      $(this.el).append('<button>Add List Item</button>');
      return $(this.el).append('<ul></ul>');
    };

    ListView4.prototype.addItem = function() {
      var item;
      this.counter++;
      item = new Item4;
      item.set({
        part2: "<b>" + (item.get('part2')) + " " + this.counter + "</b>"
      });
      return this.collection.add(item);
    };

    ListView4.prototype.appendItem = function(item) {
      var itemview;
      itemview = new ItemView4({
        model: item
      });
      return $(this.el).append(itemview.render().el);
    };

    ListView4.prototype.events = {
      'click button': 'addItem'
    };

    return ListView4;

  })(Backbone.View);

  listview4 = new ListView4;

}).call(this);
